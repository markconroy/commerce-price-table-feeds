<?php
/**
 * Implements hook_feeds_processor_targets_alter().
 *
 * Needed for importing Price Table data
 */
function commerce_price_table_feeds_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);
    if ($info['type'] == 'commerce_price_table') {
      $targets[$name] = array(
        'name' => $instance['label'],
        'callback' => 'commerce_price_table_feeds_feeds_set_target_price_table',
        'description' => t('The table price for @name field.', array('@name' => $instance['label'])),
        'real_target' => $name,
        );
      }
    }
}

/**
 * Callback for mapping. Here is where the actual mapping happens.
 *
 * When the callback is invoked, $target contains the name of the field the
 * user has decided to map to and $value contains the value of the feed item
 * element the user has picked as a source.
 *
 * Needed for importing Price Table data
 */
function commerce_price_table_feeds_feeds_set_target_price_table($source, $entity, $target, $value, $mapping) {

  if (empty($value)) {
    return;
  }

  // Handle non-multiple value fields.
  if (!is_array($value)) {
    $value = array($value);
  }

  // Iterate over all values.
  $info = field_info_field($target);
  $field = isset($entity->$target) ? $entity->$target : array();
  $i = isset($field[LANGUAGE_NONE]) ? count($field[LANGUAGE_NONE]) : 0;
  foreach ($value as $v) {
    if (!is_array($v) && !is_object($v)) {
      list($amount, $min_qty, $max_qty) = explode('|', $v);

      // always put the default currency
      $currency_code = commerce_default_currency();
      $field[LANGUAGE_NONE][$i]['currency_code'] = $currency_code;
      $field[LANGUAGE_NONE][$i]['amount'] = commerce_currency_decimal_to_amount($amount, $currency_code);
      $field[LANGUAGE_NONE][$i]['min_qty'] = $min_qty;
      $field[LANGUAGE_NONE][$i]['max_qty'] = $max_qty;
    }
    if ($info['cardinality'] == 1) {
      break;
    }
    $i++;
  }
  $entity->{$target} = $field;
}
